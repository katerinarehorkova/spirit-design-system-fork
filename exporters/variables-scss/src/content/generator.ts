import { TokenGroup, Token, TokenType } from '@supernovaio/sdk-exporters';
import { exportConfiguration } from '../index';
import { generateCssObject } from './generators/cssGenerator';
import { dimensionTokenToCSS } from './generators/dimension';

type TokenHandler = (token: Token, mappedTokens: Map<string, Token>, tokenGroups: TokenGroup[]) => string | null;

const addDisclaimer = (content: string): string => {
  if (exportConfiguration.generateDisclaimer) {
    return `/* This file was generated by Supernova, don't change by hand */\n${content}`;
  }

  return content;
};

const tokensToCSS = (
  tokens: Token[],
  handler: TokenHandler,
  mappedTokens: Map<string, Token>,
  tokenGroups: Array<TokenGroup>,
): string => {
  return tokens
    .map((token) => handler(token, mappedTokens, tokenGroups))
    .filter(Boolean)
    .join('\n');
};

export const createContent = (
  tokens: Token[],
  mappedTokens: Map<string, Token>,
  tokenGroups: Array<TokenGroup>,
  fileName: string,
  tokenType: string,
  tokensGroupName: string,
  withCssObject: boolean,
) => {
  let cssObject = '';
  const filteredTokens = tokens.filter(
    (token) => token.tokenType === tokenType && token.origin?.name?.includes(tokensGroupName),
  );
  const cssTokens = tokensToCSS(filteredTokens, dimensionTokenToCSS, mappedTokens, tokenGroups);
  if (withCssObject) {
    cssObject = generateCssObject(filteredTokens, mappedTokens, tokenGroups);
  }

  return {
    fileName,
    content: addDisclaimer(withCssObject ? `${cssTokens}\n\n${cssObject}` : cssTokens),
  };
};

export const generateContent = (
  tokens: Array<Token>,
  mappedTokens: Map<string, Token>,
  tokenGroups: Array<TokenGroup>,
) => {
  return [
    createContent(tokens, mappedTokens, tokenGroups, '_spaces.scss', TokenType.dimension, 'Spacing', true),
    createContent(tokens, mappedTokens, tokenGroups, '_radii.scss', TokenType.dimension, 'Radius', true),
    createContent(tokens, mappedTokens, tokenGroups, '_borders.scss', TokenType.dimension, 'Border', false),
  ];
};
