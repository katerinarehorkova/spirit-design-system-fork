import { TokenGroup, Token, TokenType } from '@supernovaio/sdk-exporters';
import { exportConfiguration } from '../index';
import { generateCssObject } from './generators/cssGenerator';
import { dimensionTokenToCSS } from './generators/dimension';

type TokenHandler = (
  token: Token,
  mappedTokens: Map<string, Token>,
  tokenGroups: TokenGroup[],
  withParent: boolean,
) => string | null;

const addDisclaimer = (content: string): string => {
  if (exportConfiguration.generateDisclaimer) {
    return `/* This file was generated by Supernova, don't change manually */\n${content}`;
  }

  return content;
};

const tokensToCSS = (
  tokens: Token[],
  handler: TokenHandler,
  mappedTokens: Map<string, Token>,
  tokenGroups: Array<TokenGroup>,
  withParent: boolean,
): string => {
  return tokens
    .map((token) => handler(token, mappedTokens, tokenGroups, withParent))
    .filter(Boolean)
    .join('\n');
};

export const createFileWithContent = (
  tokens: Token[],
  mappedTokens: Map<string, Token>,
  tokenGroups: Array<TokenGroup>,
  fileName: string,
  tokenTypes: TokenType[],
  groupNames: string[],
  withCssObject: boolean,
  withParent: boolean = false,
) => {
  let cssTokens = '';
  let cssObject = '';

  tokenTypes.forEach((tokenType) => {
    groupNames.forEach((group) => {
      // filter tokens by its type and group names
      const filteredTokens = tokens.filter(
        (token) => token.tokenType === tokenType && token.origin?.name?.includes(group),
      );

      // generate formatted css tokens
      cssTokens += tokensToCSS(filteredTokens, dimensionTokenToCSS, mappedTokens, tokenGroups, withParent);
      cssTokens += '\n\n';

      // generate css objects if required
      const tempCssObject = generateCssObject(filteredTokens, mappedTokens, tokenGroups, withParent);
      if (tempCssObject !== null) {
        cssObject += tempCssObject;
        cssObject += '\n\n';
      }
    });
  });

  return {
    fileName,
    content: addDisclaimer(withCssObject ? `${cssTokens}${cssObject}` : cssTokens),
  };
};

export const generateFiles = (
  tokens: Array<Token>,
  mappedTokens: Map<string, Token>,
  tokenGroups: Array<TokenGroup>,
) => {
  return [
    createFileWithContent(
      tokens,
      mappedTokens,
      tokenGroups,
      '_spaces.scss',
      [TokenType.dimension],
      ['Spacing'],
      true,
      false,
    ),
    createFileWithContent(
      tokens,
      mappedTokens,
      tokenGroups,
      '_radii.scss',
      [TokenType.dimension],
      ['Radius'],
      true,
      false,
    ),
    createFileWithContent(
      tokens,
      mappedTokens,
      tokenGroups,
      '_borders.scss',
      [TokenType.dimension],
      ['Border'],
      false,
      true,
    ),
    createFileWithContent(
      tokens,
      mappedTokens,
      tokenGroups,
      '_other.scss',
      [TokenType.dimension, TokenType.string],
      ['Grid', 'Container', 'Breakpoint'],
      true,
      true,
    ),
  ];
};
