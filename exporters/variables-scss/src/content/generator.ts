import { TokenGroup, Token, TokenType } from '@supernovaio/sdk-exporters';
import { exportConfiguration } from '../index';
import { generateCssObject } from './generators/cssGenerator';
import { dimensionTokenToCSS } from './generators/dimension';

type TokenHandler = (
  token: Token,
  mappedTokens: Map<string, Token>,
  tokenGroups: TokenGroup[],
  withParent: boolean,
) => string | null;

const addDisclaimer = (content: string): string => {
  if (exportConfiguration.generateDisclaimer) {
    return `/* This file was generated by Supernova, don't change by hand */\n${content}`;
  }

  return content;
};

const tokensToCSS = (
  tokens: Token[],
  handler: TokenHandler,
  mappedTokens: Map<string, Token>,
  tokenGroups: Array<TokenGroup>,
  withParent: boolean,
): string => {
  return tokens
    .map((token) => handler(token, mappedTokens, tokenGroups, withParent))
    .filter(Boolean)
    .join('\n');
};

export const createContent = (
  tokens: Token[],
  mappedTokens: Map<string, Token>,
  tokenGroups: Array<TokenGroup>,
  fileName: string,
  tokenType: string,
  tokensGroupNames: string[],
  withCssObject: boolean,
  withParent: boolean = false,
) => {
  let cssObject = '';
  const filteredTokens = tokens.filter(
    (token) => token.tokenType === tokenType && tokensGroupNames.some((name) => token.origin?.name?.includes(name)),
  );
  const cssTokens = tokensToCSS(filteredTokens, dimensionTokenToCSS, mappedTokens, tokenGroups, withParent);
  if (withCssObject) {
    cssObject = generateCssObject(filteredTokens, mappedTokens, tokenGroups, withParent);
  }

  return {
    fileName,
    content: addDisclaimer(withCssObject ? `${cssTokens}\n\n${cssObject}` : cssTokens),
  };
};

export const generateContent = (
  tokens: Array<Token>,
  mappedTokens: Map<string, Token>,
  tokenGroups: Array<TokenGroup>,
) => {
  return [
    createContent(tokens, mappedTokens, tokenGroups, '_spaces.scss', TokenType.dimension, ['Spacing'], true, false),
    createContent(tokens, mappedTokens, tokenGroups, '_radii.scss', TokenType.dimension, ['Radius'], true, false),
    createContent(tokens, mappedTokens, tokenGroups, '_borders.scss', TokenType.dimension, ['Border'], false, true),
    createContent(
      tokens,
      mappedTokens,
      tokenGroups,
      '_other.scss',
      TokenType.dimension,
      ['Grid', 'Container', 'Breakpoint'],
      true,
      true,
    ),
  ];
};
