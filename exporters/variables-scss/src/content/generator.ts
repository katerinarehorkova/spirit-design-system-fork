import { TokenGroup, Token, TokenType } from '@supernovaio/sdk-exporters';
import { exportConfiguration } from '../index';
import { generateCssObject } from './generators/cssGenerator';
import { dimensionTokenToCSS } from './generators/dimension';

type TokenHandler = (token: Token, mappedTokens: Map<string, Token>, tokenGroups: TokenGroup[]) => string | null;

const addDisclaimer = (content: string): string => {
  if (exportConfiguration.generateDisclaimer) {
    return `/* This file was generated by Supernova, don't change by hand */\n${content}`;
  }

  return content;
};

export const generateContent = (
  tokens: Array<Token>,
  mappedTokens: Map<string, Token>,
  tokenGroups: Array<TokenGroup>,
) => {
  return [
    {
      fileName: '_spacing.scss',
      content: createSpacingContent(tokens, mappedTokens, tokenGroups),
    },
    {
      fileName: '_radii.scss',
      content: createRadiiContent(tokens, mappedTokens, tokenGroups),
    },
  ];
};

const tokensToCSS = (
  tokens: Token[],
  handler: TokenHandler,
  mappedTokens: Map<string, Token>,
  tokenGroups: Array<TokenGroup>,
): string => {
  return tokens
    .map((token) => handler(token, mappedTokens, tokenGroups))
    .filter(Boolean)
    .join('\n');
};

export const createSpacingContent = (
  tokens: Token[],
  mappedTokens: Map<string, Token>,
  tokenGroups: Array<TokenGroup>,
) => {
  const filteredSpacingTokens = tokens.filter(
    (token) => token.tokenType === TokenType.dimension && token.origin?.name?.includes('Spacing'),
  );
  const spacingTokensToCSS = tokensToCSS(filteredSpacingTokens, dimensionTokenToCSS, mappedTokens, tokenGroups);
  const spacingObject = generateCssObject(filteredSpacingTokens, mappedTokens, tokenGroups);

  return addDisclaimer(`${spacingTokensToCSS}\n\n${spacingObject}`);
};

export const createRadiiContent = (
  tokens: Token[],
  mappedTokens: Map<string, Token>,
  tokenGroups: Array<TokenGroup>,
) => {
  const filteredRadiiTokens = tokens.filter(
    (token) => token.tokenType === TokenType.dimension && token.origin?.name?.includes('Radius'),
  );
  const radiiTokensToCSS = tokensToCSS(filteredRadiiTokens, dimensionTokenToCSS, mappedTokens, tokenGroups);
  const radiiObject = generateCssObject(filteredRadiiTokens, mappedTokens, tokenGroups);

  return addDisclaimer(`${radiiTokensToCSS}\n\n${radiiObject}`);
};
